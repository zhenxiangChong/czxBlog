import{_ as s,c as i,e as t,o as e}from"./app-C2LYEyd0.js";const n={};function p(h,a){return e(),i("div",null,a[0]||(a[0]=[t(`<h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h2><p>作用域是指 程序源代码中，定义变量的区域。</p><p>作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。</p><h2 id="词法作用域" tabindex="-1"><a class="header-anchor" href="#词法作用域"><span>词法作用域</span></a></h2><p>在 <code>JavaScript</code> 中，采用的是 词法作用域， 即静态作用域。</p><p>词法作用域规定了，函数的作用域是在 <strong>函数定义的时候就确定</strong> 了。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>这个示例的执行结果为 <code>1</code>。</p><p>在这个例子中， 由于 函数<code>foo</code> 的作用域在 定义的时候就确定了，即使在 函数<code>bar</code> 中也有相同的变量名<code>a</code>的定义， 但是由于两个函数在定义时，作用域是相互独立的，函数<code>foo</code>在其作用域查找局部变量<code>a</code>，没有找到， 继续从它书写位置往上查找上一层的代码，所以输出的结果为 <code>1</code>。</p>`,10)]))}const l=s(n,[["render",p]]),o=JSON.parse('{"path":"/article/fpcpgpod/","title":"JavaScript进阶（二）— 词法作用域","lang":"zh-CN","frontmatter":{"title":"JavaScript进阶（二）— 词法作用域","createTime":"2020/02/10 11:37:25","tags":["javascript"],"permalink":"/article/fpcpgpod/","description":"作用域 作用域是指 程序源代码中，定义变量的区域。 作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。 词法作用域 在 JavaScript 中，采用的是 词法作用域， 即静态作用域。 词法作用域规定了，函数的作用域是在 函数定义的时候就确定 了。 示例 这个示例的执行结果为 1。 在这个例子中， 由于 函数foo 的作用域在 定义的时...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript进阶（二）— 词法作用域\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-08T06:36:41.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chongzhenxiang.cn/czxBlog/article/fpcpgpod/"}],["meta",{"property":"og:site_name","content":"种振祥"}],["meta",{"property":"og:title","content":"JavaScript进阶（二）— 词法作用域"}],["meta",{"property":"og:description","content":"作用域 作用域是指 程序源代码中，定义变量的区域。 作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。 词法作用域 在 JavaScript 中，采用的是 词法作用域， 即静态作用域。 词法作用域规定了，函数的作用域是在 函数定义的时候就确定 了。 示例 这个示例的执行结果为 1。 在这个例子中， 由于 函数foo 的作用域在 定义的时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-08T06:36:41.000Z"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2025-07-08T06:36:41.000Z"}]]},"readingTime":{"minutes":0.87,"words":260},"git":{"createdTime":1751956601000,"updatedTime":1751956601000,"contributors":[{"name":"zhenxiangChong","username":"zhenxiangChong","email":"1010169013@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/zhenxiangChong?v=4","url":"https://github.com/zhenxiangChong"}]},"autoDesc":true,"filePathRelative":"1.前端/6.JavaScript/2.进阶/词法作用域.md","headers":[],"categoryList":[{"id":"72e6d5","sort":1,"name":"前端"},{"id":"e69382","sort":6,"name":"JavaScript"},{"id":"a17dc6","sort":2,"name":"进阶"}]}');export{l as comp,o as data};
